#include "poissonsampler.h"

void PoissonSampler::poissonAlg(){
    // set up pointer list of valid samples
    std::vector<Sample*> activeValidSamples(0, nullptr);

    // choose random sample loc from grid - make sure valid in the obj & add to active list & background grid
    // implement this part by doing actual pos of object instead of rand location in obj and just having the alg
    //      breaking out from there [since can only do linear transformations on obj - must be valid pos in the obj]
    glm::vec3 randGridLoc = posToGridLoc(m->transform.position());
    Sample* start = new Sample(randGridLoc, m->transform.position(), 0);
    activeValidSamples.push_back(start);

    if (threeDim) {
        backgroundGrid3D[randGridLoc[0]][randGridLoc[1]][randGridLoc[2]] = start;
    } else {
        backgroundGrid2D[randGridLoc[0]][randGridLoc[1]] = start;
    }


    // number of samples tested at each x_i in the while loop [kept constant]
    int K = 10;

    // while activeValidSampleSize > 0
    // do:
    //      i = chosen random sample index id from active list
    //      generate k pts chosen uniformly between RADIUS and 2RADIUS around the current loc
    //      For each pt k {
    //          not valid sample if (1) within RADIUS of any existing samples (2) not within given mesh obj
    //          if valid then add to active list
    //      } if after all checked and no k were added --> remove x_i from active list
    // return completed list of samples
    while(activeValidSamples.size() > 0) {
        Sample* x_i = activeValidSamples[(int)(std::rand() / (RAND_MAX) * activeValidSamples.size())];

        bool addedK = false;
        for (int i=0; i<K; i++) {
            glm::vec3 gridP = /** ------------- TO IMPLEMENT THIS PART HERE: SAMPLING RANDOM LOC IN 3D SPACE ------------- **/ glm::vec3(0.0f);
            glm::vec3 pos = gridLocToPos(gridP);

            for (Sample* samp: activeValidSamples) {
                if (glm::distance(pos, samp->pos) > RADIUS) {
                    // valid loc - only want to do within check if valid rad so checked fewer times

                    if (validLocWithinObj(pos)) {

                        // valid then create and add to grid
                        glm::vec3 gLoc = posToGridLoc(pos);
                        int id = activeValidSamples.size() + i;
                        Sample* kPoint = new Sample(gLoc, pos, id);

                        activeValidSamples.push_back(kPoint);

                        if (threeDim) {
                            backgroundGrid3D[gLoc[0]][gLoc[1]][gLoc[2]] = kPoint;
                        } else {
                            backgroundGrid2D[gLoc[0]][gLoc[1]] = kPoint;
                        }

                        addedK = true;
                    }
                }
            }// end: for (Sample* samp: activeValidSamples);
        }// end: for (int i=0; i<K; i++);

        if (!addedK) {
            //x_i no longer a valid sample
            activeValidSamples.erase(std::remove(activeValidSamples.begin(), activeValidSamples.end(), x_i),
                                     activeValidSamples.end());
        }

    } //end: while(activeValidSamples.size() > 0)
}

void PoissonSampler::initializeBackgroundGrids() {
    // set up background grid
    //      for now grid dimensions based entirely on const radius as declared.

    // grid dim: RADIUS/(dim_n)^1/2 --> bigger r is bigger voxels is fewer samples

    int nDim = 3;
    if (!threeDim) { nDim = 2; }

    float maxVoxelSize = RADIUS/(nDim*nDim);
    Point3f maxP = bbox->max;
    Point3f minP = bbox->min;

    this->voxelDim = glm::vec3((maxP[0] - minP[0])/maxVoxelSize,
                               (maxP[1] - minP[1])/maxVoxelSize,
                               (maxP[2] - minP[2])/maxVoxelSize);

    this->backgroundGrid3D = std::vector<std::vector<std::vector<Sample*>>>(
                                   voxelDim[0],
                                   std::vector<std::vector<Sample*>>(voxelDim[1],
                                                                     std::vector<Sample*>(voxelDim[2], nullptr)
                                                                     )
                             );
    this->backgroundGrid2D = std::vector<std::vector<Sample*>>(
                                   voxelDim[0],
                                   std::vector<Sample*>(voxelDim[1])
                             );
}

/**
 * @brief posToGridLoc - helper method for poisson alg
 * @param p - position to be put into grid
 * @param voxelDim - dimensions of each voxel loc
 * @return glm::vec3 - valid grid location of this position
 */
glm::vec3 PoissonSampler::posToGridLoc(glm::vec3 p) {
    // precondition: given position is already valid location inside the given object
    // grid is based around bounds3f of bbox for the given object

    glm::vec3 min = bbox->min;

    if (threeDim) {
        return glm::vec3((int)((p[0] - min[0])/voxelDim[0]),
                         (int)((p[1] - min[1])/voxelDim[1]),
                         (int)((p[2] - min[2])/voxelDim[2]));
    }

    return glm::vec3((int)((p[0] - min[0])/voxelDim[0]),
                     (int)((p[1] - min[1])/voxelDim[1]),
                     0); //since grid is 2d version dont want to worry about unnecessary dividing.

}

glm::vec3 PoissonSampler::gridLocToPos(glm::vec3 gLoc) {
    // note: just returning one corner of grid since that is all the info we have
    glm::vec3 min = bbox->min;

    if (threeDim) {
        return glm::vec3(gLoc[0]*voxelDim[0] + min[0],
                         gLoc[1]*voxelDim[1] + min[1],
                         gLoc[2]*voxelDim[2] + min[2]);
    }

    return glm::vec3(gLoc[0]*voxelDim[0] + min[0],
                     gLoc[1]*voxelDim[1] + min[1],
                     0); //since grid is 2d version dont want to worry about unnecessary mult.
}

/**
 * @brief sampleWithinObj - checks if given sampled location is within the object being checked
 * @param p: the position of the given sample - so can check if within given obj to fill
 * @return true, if within; false, otherwise.
 */
bool PoissonSampler::validLocWithinObj(glm::vec3 p) {
    // TO DO - use voxelDim
    return false;
}
